# coding=utf-8
# *** WARNING: this file was generated by pulumi-language-python. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'BuildGoResult',
    'AwaitableBuildGoResult',
    'build_go',
    'build_go_output',
]

@pulumi.output_type
class BuildGoResult:
    def __init__(__self__, asset=None):
        if asset and not isinstance(asset, pulumi.Archive):
            raise TypeError("Expected argument 'asset' to be a pulumi.Archive")
        pulumi.set(__self__, "asset", asset)

    @property
    @pulumi.getter
    def asset(self) -> Optional[pulumi.Archive]:
        """
        The archive that contains the golang binary that will be deployed to the Lambda Function.
        """
        return pulumi.get(self, "asset")


class AwaitableBuildGoResult(BuildGoResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return BuildGoResult(
            asset=self.asset)


def build_go(architecture: Optional[str] = None,
             code: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableBuildGoResult:
    """
    Builds a Golang Lambda Function into a Pulumi Asset that can be deployed.

    The below example uses a folder structure like this:

    The output of `buildGo` produces an asset that can be passed to the
    `aws.Lambda` `Code` property.

    ## Example Usage

    Basic usage:

    ```python
    import pulumi
    import pulumi_aws as aws
    import pulumi_lambda_builders as lambda_builders

    builder = lambda_builders.build_go(architecture="arm64",
        code="cmd/simple")
    lambda_role_policy = aws.iam.get_policy_document_output(statements=[aws.iam.GetPolicyDocumentStatementArgs(
        actions=["sts:AssumeRole"],
        principals=[aws.iam.GetPolicyDocumentStatementPrincipalArgs(
            type="Service",
            identifiers=["lambda.amazonaws.com"],
        )],
    )])
    role = aws.iam.Role("role", assume_role_policy=lambda_role_policy.json)
    function = aws.lambda_.Function("function",
        code=builder.asset,
        architectures=["arm64"],
        handler="bootstrap",
        role=role.arn,
        runtime=aws.lambda_.Runtime.CUSTOM_AL2023)
    ```


    :param str architecture: Lambda function architecture to build for. Valid values are `"x86_64"` and `"arm64"`. Default is `"x86_64"`.
    :param str code: The path to the go code to build
    """
    __args__ = dict()
    __args__['architecture'] = architecture
    __args__['code'] = code
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('lambda-builders:index:buildGo', __args__, opts=opts, typ=BuildGoResult).value

    return AwaitableBuildGoResult(
        asset=pulumi.get(__ret__, 'asset'))


@_utilities.lift_output_func(build_go)
def build_go_output(architecture: Optional[pulumi.Input[Optional[str]]] = None,
                    code: Optional[pulumi.Input[Optional[str]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[BuildGoResult]:
    """
    Builds a Golang Lambda Function into a Pulumi Asset that can be deployed.

    The below example uses a folder structure like this:

    The output of `buildGo` produces an asset that can be passed to the
    `aws.Lambda` `Code` property.

    ## Example Usage

    Basic usage:

    ```python
    import pulumi
    import pulumi_aws as aws
    import pulumi_lambda_builders as lambda_builders

    builder = lambda_builders.build_go(architecture="arm64",
        code="cmd/simple")
    lambda_role_policy = aws.iam.get_policy_document_output(statements=[aws.iam.GetPolicyDocumentStatementArgs(
        actions=["sts:AssumeRole"],
        principals=[aws.iam.GetPolicyDocumentStatementPrincipalArgs(
            type="Service",
            identifiers=["lambda.amazonaws.com"],
        )],
    )])
    role = aws.iam.Role("role", assume_role_policy=lambda_role_policy.json)
    function = aws.lambda_.Function("function",
        code=builder.asset,
        architectures=["arm64"],
        handler="bootstrap",
        role=role.arn,
        runtime=aws.lambda_.Runtime.CUSTOM_AL2023)
    ```


    :param str architecture: Lambda function architecture to build for. Valid values are `"x86_64"` and `"arm64"`. Default is `"x86_64"`.
    :param str code: The path to the go code to build
    """
    ...
