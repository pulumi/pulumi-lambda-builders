{
    "name": "lambda-builders",
    "displayName": "AWS Lambda Builders",
    "description": "Utilities for building AWS Lambda Functions",
    "repository": "https://github.com/pulumi/pulumi-lambda-builders",
    "homepage": "https://pulumi.com",
    "license": "Apache-2.0",
    "publisher": "Pulumi",
    "resources": {},
    "functions": {
        "lambda-builders:index:buildGo": {
            "description": "Builds a Golang Lambda Function into a Pulumi Asset that can be deployed.\n\nThe below example uses a folder structure like this:\n```tree\nexamples/simple-go\n├── Pulumi.yaml\n├── cmd\n│   └── simple\n│       └── main.go\n├── go.mod\n├── go.sum\n└── main.go\n```\n\nThe output of `buildGo` produces an asset that can be passed to the\n`aws.Lambda` `Code` property.\n\n{{< chooser language \"typescript,python,go,csharp,java,yaml\" / >}}\n\n{{% choosable language \"javascript,typescript\" %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as lambda_builders from \"@pulumi/lambda-builders\";\n\nconst builder = lambda_builders.buildGo({\n    architecture: \"arm64\",\n    code: \"cmd/simple\",\n});\nconst lambdaRolePolicy = aws.iam.getPolicyDocumentOutput({\n    statements: [{\n        actions: [\"sts:AssumeRole\"],\n        principals: [{\n            type: \"Service\",\n            identifiers: [\"lambda.amazonaws.com\"],\n        }],\n    }],\n});\nconst role = new aws.iam.Role(\"role\", {\n   assumeRolePolicy: lambdaRolePolicy.apply(lambdaRolePolicy => lambdaRolePolicy.json),\n});\nnew aws.lambda.Function(\"function\", {\n    code: builder.asset,\n    architectures: [\"arm64\"],\n    handler: \"bootstrap\",\n    role: role.arn,\n    runtime: aws.lambda.Runtime.CustomAL2023,\n});\n```\n\n{{% /choosable %}}\n\n{{% choosable language python %}}\n\n```python\nimport pulumi\nimport pulumi_aws as aws\nimport pulumi_lambda_builders as lambda_builders\n\nbuilder = lambda_builders.build_go(architecture=\"arm64\",\n    code=\"cmd/simple\")\nlambda_role_policy = aws.iam.get_policy_document_output(statements=[aws.iam.GetPolicyDocumentStatementArgs(\n    actions=[\"sts:AssumeRole\"],\n    principals=[aws.iam.GetPolicyDocumentStatementPrincipalArgs(\n        type=\"Service\",\n        identifiers=[\"lambda.amazonaws.com\"],\n    )],\n)])\nrole = aws.iam.Role(\"role\", assume_role_policy=lambda_role_policy.json)\nfunction = aws.lambda_.Function(\"function\",\n    code=builder.asset,\n    architectures=[\"arm64\"],\n    handler=\"bootstrap\",\n    role=role.arn,\n    runtime=aws.lambda_.Runtime.CUSTOM_AL2023)\n```\n\n{{% /choosable %}}\n\n{{% choosable language go %}}\n\n```go\npackage main\n\nimport (\n	\"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/iam\"\n	\"github.com/pulumi/pulumi-aws/sdk/v6/go/aws/lambda\"\n	lambdabuilders \"github.com/pulumi/pulumi-lambda-builders/sdk/go/lambda-builders\"\n	\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n	pulumi.Run(func(ctx *pulumi.Context) error {\n		builder, err := lambdabuilders.BuildGo(ctx, &lambdabuilders.BuildGoArgs{\n			Architecture: pulumi.StringRef(\"arm64\"),\n			Code:         pulumi.StringRef(\"cmd/simple\"),\n		}, nil)\n		if err != nil {\n			return err\n		}\n		lambdaRolePolicy, err := iam.GetPolicyDocument(ctx, &iam.GetPolicyDocumentArgs{\n			Statements: []iam.GetPolicyDocumentStatement{\n				{\n					Actions: []string{\n						\"sts:AssumeRole\",\n					},\n					Principals: []iam.GetPolicyDocumentStatementPrincipal{\n						{\n							Type: \"Service\",\n							Identifiers: []string{\n								\"lambda.amazonaws.com\",\n							},\n						},\n					},\n				},\n			},\n		}, nil)\n		if err != nil {\n			return err\n		}\n		role, err := iam.NewRole(ctx, \"role\", &iam.RoleArgs{\n			AssumeRolePolicy: pulumi.String(lambdaRolePolicy.Json),\n		})\n		if err != nil {\n			return err\n		}\n		_, err = lambda.NewFunction(ctx, \"function\", &lambda.FunctionArgs{\n			Code: builder.Asset,\n			Architectures: pulumi.StringArray{\n				pulumi.String(\"arm64\"),\n			},\n			Handler: pulumi.String(\"bootstrap\"),\n			Role:    role.Arn,\n			Runtime: pulumi.String(lambda.RuntimeCustomAL2023),\n		})\n		if err != nil {\n			return err\n		}\n		return nil\n	})\n}\n```\n\n{{% /choosable %}}\n\n{{% choosable language csharp %}}\n\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing LambdaBuilders = Pulumi.LambdaBuilders;\n\nreturn await Deployment.RunAsync(() => \n{\n    var builder = LambdaBuilders.BuildGo.Invoke(new()\n    {\n        Architecture = \"arm64\",\n        Code = \"cmd/simple\",\n    });\n\n    var lambdaRolePolicy = Aws.Iam.GetPolicyDocument.Invoke(new()\n    {\n        Statements = new[]\n        {\n            new Aws.Iam.Inputs.GetPolicyDocumentStatementInputArgs\n            {\n                Actions = new[]\n                {\n                    \"sts:AssumeRole\",\n                },\n                Principals = new[]\n                {\n                    new Aws.Iam.Inputs.GetPolicyDocumentStatementPrincipalInputArgs\n                    {\n                        Type = \"Service\",\n                        Identifiers = new[]\n                        {\n                            \"lambda.amazonaws.com\",\n                        },\n                    },\n                },\n            },\n        },\n    });\n\n    var role = new Aws.Iam.Role(\"role\", new()\n    {\n        AssumeRolePolicy = lambdaRolePolicy.Apply(getPolicyDocumentResult => getPolicyDocumentResult.Json),\n    });\n\n    var function = new Aws.Lambda.Function(\"function\", new()\n    {\n        Code = builder.Apply(buildGoResult => buildGoResult.Asset),\n        Architectures = new[]\n        {\n            \"arm64\",\n        },\n        Handler = \"bootstrap\",\n        Role = role.Arn,\n        Runtime = Aws.Lambda.Runtime.CustomAL2023,\n    });\n\n});\n```\n\n{{% /choosable %}}\n\n{{% choosable language java %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.lambdabuilders.LambdabuildersFunctions;\nimport com.pulumi.lambdabuilders.inputs.BuildGoArgs;\nimport com.pulumi.aws.iam.IamFunctions;\nimport com.pulumi.aws.iam.inputs.GetPolicyDocumentArgs;\nimport com.pulumi.aws.iam.Role;\nimport com.pulumi.aws.iam.RoleArgs;\nimport com.pulumi.aws.lambda.Function;\nimport com.pulumi.aws.lambda.FunctionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var builder = Lambda-buildersFunctions.buildGo(BuildGoArgs.builder()\n            .architecture(\"arm64\")\n            .code(\"cmd/simple\")\n            .build());\n\n        final var lambdaRolePolicy = IamFunctions.getPolicyDocument(GetPolicyDocumentArgs.builder()\n            .statements(GetPolicyDocumentStatementArgs.builder()\n                .actions(\"sts:AssumeRole\")\n                .principals(GetPolicyDocumentStatementPrincipalArgs.builder()\n                    .type(\"Service\")\n                    .identifiers(\"lambda.amazonaws.com\")\n                    .build())\n                .build())\n            .build());\n\n        var role = new Role(\"role\", RoleArgs.builder()\n            .assumeRolePolicy(lambdaRolePolicy.applyValue(getPolicyDocumentResult -> getPolicyDocumentResult.json()))\n            .build());\n\n        var function = new Function(\"function\", FunctionArgs.builder()\n            .code(buildGoResult.asset())\n            .architectures(\"arm64\")\n            .handler(\"bootstrap\")\n            .role(role.arn())\n            .runtime(\"provided.al2023\")\n            .build());\n\n    }\n}\n```\n\n{{% /choosable %}}\n\n{{% choosable language yaml %}}\n\n```yaml\n  role:\n    type: aws:iam:Role\n    properties:\n      assumeRolePolicy: ${lambdaRolePolicy.json}\n  function:\n    type: aws:lambda:Function\n    properties:\n      code: ${builder.asset}\n      architectures:\n        - arm64\n      handler: bootstrap\n      role: ${role.arn}\n      runtime: provided.al2023\nvariables:\n  builder:\n    fn::invoke:\n      Function: lambda-builders:index:buildGo\n      Arguments:\n        architecture: arm64\n        code: cmd/simple\n  lambdaRolePolicy:\n    fn::invoke:\n      Function: aws:iam:getPolicyDocument\n      Arguments:\n        statements:\n          - actions:\n              - sts:AssumeRole\n            principals:\n              - type: Service\n                identifiers:\n                  - lambda.amazonaws.com\n```\n\n{{% /choosable %}}",
            "inputs": {
                "properties": {
                    "code": {
                        "type": "string"
                        "description": "The path to the go code to build"
                    },
                    "architecture": {
                        "type": "string",
                        "description": "Lambda function architecture to build for. Valid values are `\"x86_64\"` and `\"arm64\"`. Default is `\"x86_64\"`.",
                        "enum": [
                            {
                                "name": "ARM_64",
                                "value": "arm64"
                            },
                            {
                                "name": "X86_64",
                                "value": "x86_64"
                            }
                        ]
                    }
                }
            },
            "outputs": {
                "properties": {
                    "description": "The archive that contains the golang binary that will be deployed to the Lambda Function.",
                    "asset": {
                        "$ref": "pulumi.json#/Archive"
                    }
                }
            }
        }
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*",
                "Pulumi.Aws": "6.*"
            }
        },
        "go": {
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-lambda-builders/sdk/go/lambda-builders"
        },
        "nodejs": {
            "dependencies": {
                "@pulumi/aws": "^6.0.0"
            },
            "devDependencies": {
                "typescript": "^4.6.3"
            }
        },
        "java": {
            "basePackage": "",
            "buildFiles": "gradle",
            "dependencies": {
                "com.google.code.findbugs:jsr305": "3.0.2",
                "com.google.code.gson:gson": "2.8.9",
                "com.pulumi:pulumi": "0.9.9"
            },
            "gradleNexusPublishPluginVersion": "1.1.0",
            "gradleTest": ""
        },
        "python": {
            "requires": {
                "pulumi": ">=3.0.0,<4.0.0",
                "pulumi-aws": ">=6.0.0,<7.0.0"
            }
        }
    }
}
